First Test: assign and print

***********************
main: arg // comment 
  input = arg
*****************
input = input=arg => 7

Second Test: double input and print

***********************
main:input // define a function that accepts one input
  doubd=input*2 // multiply input by two and assign result to doubled

*****************
@0 = input*2 => 14
doubd = doubd=@0 => 14

Third Test: All the maths

***********************
main:input // define a function that accepts an array of doubles
  addOne = input + 1

  minOne = input - 1

  multThree = input * 3

  divThree = input / 3

  toTwo = input ^ 2

  allGrow = input + 1 * 2 ^ 2 // add 4

  allShrink = input - 2 / 2 // min 1

  ooo = 2 * (input - 5) ^ 2

  manyMin = input - 1 - 1 - 1 // min 3


*****************
@0 = input+1 => 8
addOne = addOne=@0 => 8
@0 = input-1 => 6
minOne = minOne=@0 => 6
@0 = input*3 => 21
multThree = multThree=@0 => 21
@0 = input/3 => 2.33333
divThree = divThree=@0 => 2.33333
@0 = input^2 => 49
toTwo = toTwo=@0 => 49
@0 = 2^2 => 4
@1 = 1*@0 => 4
@2 = input+@1 => 11
allGrow = allGrow=@2 => 11
@0 = 2/2 => 1
@1 = input-@0 => 6
allShrink = allShrink=@1 => 6
@1 = input-5 => 2
@0 = @0=@1 => 2
@2 = @0^2 => 4
@3 = 2*@2 => 8
ooo = ooo=@3 => 8
@0 = input-1 => 6
@1 = @0-1 => 5
@2 = @1-1 => 4
manyMin = manyMin=@2 => 4

Forth Test: return

***********************
main: a, b
  return(a+b)
  v = 9*9 // should not be run

*****************
@1 = a+b => 10
@0 = @0=@1 => 10
return(@0) => 10
result: 10

Fifth Test: running a bunch of functions

***********************
main: a, b
  one(a)
  two(a, b)
  one((a*b))
  two(a, (a*(b+2)))
  v=2x(10)

one: n
  v = n * 1

two: a, b
  av = a * 2
  bv = b * 2

2x: n
 xv=n*2
 return(xv)


*****************
@0 = @0=a => 5
@0 = n*1 => 5
v = v=@0 => 5
one(@0) => 0
@0 = @0=a => 5
@1 = @1=b => 8
@0 = a*2 => 10
av = av=@0 => 10
@0 = b*2 => 16
bv = bv=@0 => 16
two(@0, @1) => 0
@2 = a*b => 40
@1 = @1=@2 => 40
@0 = @0=@1 => 40
@0 = n*1 => 40
v = v=@0 => 40
one(@0) => 0
@0 = @0=a => 5
@4 = b+2 => 10
@3 = @3=@4 => 10
@5 = a*@3 => 50
@2 = @2=@5 => 50
@1 = @1=@2 => 50
@0 = a*2 => 10
av = av=@0 => 10
@0 = b*2 => 100
bv = bv=@0 => 100
two(@0, @1) => 0
@0 = @0=10 => 10
@0 = n*2 => 20
xv = xv=@0 => 20
@0 = @0=xv => 20
return(@0) => 20
2x(@0) => 20
v = v=@0 => 20
